{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helena.kotoulova\\\\ReactCompleteGuide\\\\third-project-section9\\\\01-starting-project\\\\08-finished\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AddUser from './components/Users/AddUser';\nimport UsersList from './components/Users/UsersList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [usersList, setUsersList] = useState([]);\n\n  const addUserHandler = (uName, uAge) => {\n    setUsersList(prevUsersList => {\n      return [...prevUsersList, {\n        name: uName,\n        age: uAge,\n        id: Math.random().toString()\n      }];\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddUser, {\n      onAddUser: addUserHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UsersList, {\n      users: usersList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"rCuhwovjWVqRB5NhAf7v+2So/Rg=\");\n\n_c = App;\nexport default App;\n/*\nUSING REACT FRAGMENTS, WRAPPERS:\nVzdycky je potreba v JSX kodu ty elementy wrapnout do nejakeho hlavniho elementu.\nnapr.:\n<div>\n    <h2></h2>\n</div>\n\nJenze se muze stat, ze ve vysledku budu mit moc divu za sebou (v nejake vetsi aplikaci)\na muze to rozbit styly, navic to vytvari prazdne html elementy, ktere muzou zpomalovat stranku,\nproto vytvorime slozku Helpers a v ni Wrapper.\n\nKazdopadne v Reactu existuje takovy prvek uz sam o sobe: <React.Fragment></React.Fragment>\nnebo: <> </>\n\n*/\n\n/*\nUSING REACT PORTALS:\nTohle neni uplne spravne:\n<>\n  <MyModal />\n  <MyInputForm />\n</>\n\nSice to muze fungovat, pokud amme dobre nastavene styly, ale ten MyModal by mel byt nejak samostatne,\nprotoze se jedna o prvek, ktery by mel celou stranku prekryt. Takhle to pusobi, ze se ma vyvolat Modal\na za nim MyInputForm. Neni tedy dobre mit ten Modal takhle nested.\n=> proto pouzivame ReactPortals:\nNejdrive v zalozce public v index.html, pridame tyhle radky za <noscript>: \n<div id=\"backdrop-root\"></div>\n<div id=\"modal-root\"></div>\n\nPak si v ErrorModal.js vytvorime const ModalOVerLay a const Backdrop, do kterych dame to,\nco bylo puvodne v returnu pro ErrorModal.\nA v returnu pro ErrorModal se na to odkazeme pomoci createPortal. A musime tam taky popsat ty props.\n*/\n\n/*\nUSING REFS:\nJe lepsi je pouzit ve forms misto useState (ty tam ted mame nastavene tak ze se aktualizuji pri kazdem key stroku)\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/helena.kotoulova/ReactCompleteGuide/third-project-section9/01-starting-project/08-finished/src/App.js"],"names":["React","useState","AddUser","UsersList","App","usersList","setUsersList","addUserHandler","uName","uAge","prevUsersList","name","age","id","Math","random","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMM,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACtCH,IAAAA,YAAY,CAAEI,aAAD,IAAmB;AAC9B,aAAO,CACL,GAAGA,aADE,EAEL;AAAEC,QAAAA,IAAI,EAAEH,KAAR;AAAeI,QAAAA,GAAG,EAAEH,IAApB;AAA0BI,QAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd;AAA9B,OAFK,CAAP;AAID,KALW,CAAZ;AAMD,GAPD;;AASA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAET;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEF;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAlBQD,G;;KAAAA,G;AAoBT,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\n\nimport AddUser from './components/Users/AddUser';\nimport UsersList from './components/Users/UsersList';\n\nfunction App() {\n  const [usersList, setUsersList] = useState([]);\n\n  const addUserHandler = (uName, uAge) => {\n    setUsersList((prevUsersList) => {\n      return [\n        ...prevUsersList,\n        { name: uName, age: uAge, id: Math.random().toString() },\n      ];\n    });\n  };\n\n  return (\n    <>\n      <AddUser onAddUser={addUserHandler} />\n      <UsersList users={usersList} />\n    </>\n  );\n}\n\nexport default App;\n\n/*\nUSING REACT FRAGMENTS, WRAPPERS:\nVzdycky je potreba v JSX kodu ty elementy wrapnout do nejakeho hlavniho elementu.\nnapr.:\n<div>\n    <h2></h2>\n</div>\n\nJenze se muze stat, ze ve vysledku budu mit moc divu za sebou (v nejake vetsi aplikaci)\na muze to rozbit styly, navic to vytvari prazdne html elementy, ktere muzou zpomalovat stranku,\nproto vytvorime slozku Helpers a v ni Wrapper.\n\nKazdopadne v Reactu existuje takovy prvek uz sam o sobe: <React.Fragment></React.Fragment>\nnebo: <> </>\n\n*/\n\n/*\nUSING REACT PORTALS:\nTohle neni uplne spravne:\n<>\n  <MyModal />\n  <MyInputForm />\n</>\n\nSice to muze fungovat, pokud amme dobre nastavene styly, ale ten MyModal by mel byt nejak samostatne,\nprotoze se jedna o prvek, ktery by mel celou stranku prekryt. Takhle to pusobi, ze se ma vyvolat Modal\na za nim MyInputForm. Neni tedy dobre mit ten Modal takhle nested.\n=> proto pouzivame ReactPortals:\nNejdrive v zalozce public v index.html, pridame tyhle radky za <noscript>: \n<div id=\"backdrop-root\"></div>\n<div id=\"modal-root\"></div>\n\nPak si v ErrorModal.js vytvorime const ModalOVerLay a const Backdrop, do kterych dame to,\nco bylo puvodne v returnu pro ErrorModal.\nA v returnu pro ErrorModal se na to odkazeme pomoci createPortal. A musime tam taky popsat ty props.\n*/\n\n/*\nUSING REFS:\nJe lepsi je pouzit ve forms misto useState (ty tam ted mame nastavene tak ze se aktualizuji pri kazdem key stroku)\n*/"]},"metadata":{},"sourceType":"module"}